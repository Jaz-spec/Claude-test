services:
  nextjs-dev:
    name: "Next.js Development Server"
    start: "npm run dev"
    ready: "curl -f http://localhost:3000 || exit 1"
    stop: "pkill -f 'next dev'"
    triggers:
      - postEnvironmentStart

  storybook:
    name: "Storybook Server (Optional)"
    start: "npm run storybook"
    ready: "curl -f http://localhost:6006 || exit 1"
    triggers:
      - manual

tasks:
  # Environment Setup (runs on both triggers for Gitpod Desktop)
  setup-environment:
    name: "Setup Development Environment"
    command: |
      echo "🚀 Setting up your development environment (Gitpod Desktop)..."
      
      # Check if dependencies need to be installed
      if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ]; then
        echo "📦 Installing dependencies..."
        npm install
        echo "✅ Dependencies installed"
      else
        echo "✅ Dependencies already installed"
      fi
      
      # Setup git hooks if they exist
      if [ -f ".githooks/setup.sh" ]; then
        chmod +x .githooks/setup.sh
        ./.githooks/setup.sh
        echo "✅ Git hooks configured"
      fi
      
      # Create env file from example if it doesn't exist
      if [ -f ".env.example" ] && [ ! -f ".env.local" ]; then
        cp .env.example .env.local
        echo "✅ Environment file created from example"
      fi
      
      # Gitpod Desktop specific: ensure proper git configuration
      git config --global --add safe.directory /workspace
      
      echo "🎉 Environment setup complete!"
    triggers:
      - postDevcontainerStart
      - postEnvironmentStart

  # Development Commands
  fresh-install:
    name: "Fresh Install (Clean Dependencies)"
    command: |
      echo "🧹 Cleaning node_modules and package-lock.json..."
      rm -rf node_modules package-lock.json
      echo "📦 Installing fresh dependencies..."
      npm install
      echo "✅ Fresh install complete!"
    triggers:
      - manual

  build-project:
    name: "Build Next.js Project"
    command: |
      echo "🏗️ Building project..."
      npm run build
      echo "✅ Build complete!"
    triggers:
      - manual

  # Testing & Quality
  run-tests:
    name: "Run Test Suite"
    command: |
      echo "🧪 Running tests..."
      npm test
    triggers:
      - manual

  run-tests-watch:
    name: "Run Tests in Watch Mode"
    command: "npm run test:watch"
    triggers:
      - manual

  lint-and-fix:
    name: "Lint and Auto-fix Code"
    command: |
      echo "🔍 Linting code..."
      npm run lint -- --fix
      echo "✅ Linting complete!"
    triggers:
      - manual

  type-check:
    name: "TypeScript Type Check"
    command: |
      echo "🔍 Checking TypeScript types..."
      npx tsc --noEmit
      echo "✅ Type checking complete!"
    triggers:
      - manual

  format-code:
    name: "Format All Code"
    command: |
      echo "💄 Formatting code..."
      npm run format
      echo "✅ Code formatting complete!"
    triggers:
      - manual

  # Git Workflow Helpers
  sync-main:
    name: "Sync with Main Branch"
    command: |
      echo "🔄 Syncing with main branch..."
      git fetch origin
      git checkout main
      git pull origin main
      echo "✅ Synced with main branch!"
    triggers:
      - manual

  create-feature-branch:
    name: "Create Feature Branch"
    command: |
      echo "Please run: git checkout -b feature/your-feature-name"
      echo "Example: git checkout -b feature/user-authentication"
    triggers:
      - manual

  # Database & External Services (if applicable)
  setup-database:
    name: "Setup Database"
    command: |
      if [ -f "prisma/schema.prisma" ]; then
        echo "🗃️ Setting up Prisma database..."
        npx prisma generate
        npx prisma db push
        if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
          npm run db:seed
          echo "✅ Database seeded!"
        fi
        echo "✅ Database setup complete!"
      else
        echo "ℹ️ No Prisma schema found, skipping database setup"
      fi
    dependencies:
      - setup-environment
    triggers:
      - manual

  reset-database:
    name: "Reset Database"
    command: |
      if [ -f "prisma/schema.prisma" ]; then
        echo "🔄 Resetting database..."
        npx prisma db push --force-reset
        if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
          npm run db:seed
        fi
        echo "✅ Database reset complete!"
      else
        echo "ℹ️ No Prisma schema found, skipping database reset"
      fi
    triggers:
      - manual

  # Team Utilities
  show-team-info:
    name: "Show Team Development Info"
    command: |
      echo "👥 TEAM DEVELOPMENT ENVIRONMENT"
      echo "================================"
      echo "📁 Project: $(basename $(pwd))"
      echo "🌿 Current branch: $(git branch --show-current)"
      echo "👤 Git user: $(git config user.name) <$(git config user.email)>"
      echo "📦 Node version: $(node --version)"
      echo "📦 NPM version: $(npm --version)"
      echo ""
      echo "🚀 Available ports:"
      echo "   - 3000: Next.js dev server"
      echo "   - 3001: Storybook (if enabled)"
      echo "   - 8080: Preview server"
      echo ""
      echo "💡 Quick commands:"
      echo "   - npm run dev: Start development server"
      echo "   - npm run build: Build for production"
      echo "   - npm test: Run tests"
      echo "   - npm run lint: Lint code"
      echo ""
      echo "📚 Check docs/ folder for team guidelines!"
    triggers:
      - manual